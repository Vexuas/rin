{"version":3,"sources":["components/ShowCardTimer/index.js","components/ShowCardTopBanner/index.js","components/ShowCardBottomBanner/index.js","components/ShowCard/index.js","components/ShowFeed/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["getDateWithDayOfTheWeek","day","hour","minute","result","now","Date","getDay","addDays","console","log","getHours","getMinutes","setHours","setMinutes","setSeconds","convertSecondsToTimer","seconds","temp","hours","minutes","output","convertSecondsToInterval","convertSecondsToHours","convertSecondsToMinutes","concat","paddedTime","t","interval","parseInt","Math","floor","calculateDistance","date","differenceInSeconds","ShowCardTimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","airDate","air_day","air_hour","air_minute","state","flicker","currentDistance","currentInterval","countdownTimer","bind","assertThisInitialized","_this2","setInterval","setState","react_default","a","createElement","Component","ShowCardTopBanner","className","components_ShowCardTimer","ShowCardBottomBanner","title","ShowCard","show","styles","backgroundImage","img_src","backgroundPosition","backgroundRepeat","backgroundSize","style","components_ShowCardTopBanner","components_ShowCardBottomBanner","ShowFeed","shows","sort","b","sortShowsByClosestToToday","map","s","components_ShowCard","key","id","getCurrentTime","toLocaleTimeString","second","Header","currentTime","App","src_components_Header","components_ShowFeed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb7a5e47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { addDays, differenceInSeconds } from \"date-fns\";\n\n/**\n * Tries to find what date it will be for a particular day of the week.\n * Does this by using today's Date object as an anchor to figure out what date\n * the particular day of the week will fall on.\n *\n *\n * @param {number} day\n * @param {number} hour\n * @param {number} minute\n */\nexport function getDateWithDayOfTheWeek(day, hour, minute) {\n  let now = new Date();\n  let result;\n\n  // If current time is past the release time, we calculate for next week's airing.\n  if (now.getDay() > day) {\n    result = addDays(now, day - now.getDay() + 7);\n    console.log(\"hello\");\n  } else {\n    if (now.getDay() === day && now.getHours() > hour) {\n      result = addDays(now, day - now.getDay() + 7);\n      console.log(\"what\");\n    } else {\n      if (\n        now.getDay() === day &&\n        now.getHours() === hour &&\n        now.getMinutes() > minute\n      ) {\n        result = result = addDays(now, day - now.getDay() + 7);\n        console.log(\"whatthe\");\n      } else {\n        result = addDays(now, day - now.getDay());\n      }\n    }\n  }\n\n  result.setHours(hour);\n  result.setMinutes(minute);\n  result.setSeconds(0);\n\n  return result;\n}\nfunction convertSecondsToTimer(seconds) {\n  let temp, hours, minutes;\n  let output = \"\";\n\n  temp = convertSecondsToHours(seconds);\n  seconds = temp.seconds;\n  hours = temp.result;\n\n  temp = convertSecondsToMinutes(seconds);\n  seconds = temp.seconds;\n  minutes = temp.result;\n\n  if (hours) {\n    output = `${output} ${paddedTime(hours)}:`;\n  }\n  output = `${output}${paddedTime(minutes)}:${paddedTime(seconds)}`;\n\n  return output;\n}\n\nfunction paddedTime(t) {\n  if (t < 10) {\n    return `0${t}`;\n  } else {\n    return `${t}`;\n  }\n}\n\n// function convertSecondsToDays(seconds) {\n//   return convertSecondsToInterval(seconds, 60 * 60 * 24);\n// }\n\nfunction convertSecondsToHours(seconds) {\n  return convertSecondsToInterval(seconds, 60 * 60);\n}\n\nfunction convertSecondsToMinutes(seconds) {\n  return convertSecondsToInterval(seconds, 60);\n}\n\nfunction convertSecondsToInterval(seconds, interval) {\n  seconds = parseInt(seconds, 10);\n  const result = Math.floor(seconds / interval);\n\n  if (result) {\n    seconds = seconds - result * interval;\n  }\n\n  return { seconds: seconds, result: result };\n}\nfunction calculateDistance(date) {\n  const now = new Date();\n\n  let result = differenceInSeconds(date, now);\n\n  return convertSecondsToTimer(result);\n}\n\nclass ShowCardTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    const airDate = getDateWithDayOfTheWeek(\n      props.air_day,\n      props.air_hour,\n      props.air_minute\n    );\n\n    this.state = {\n      flicker: false,\n      airDate: airDate,\n      currentDistance: calculateDistance(airDate),\n      currentInterval: null\n    };\n\n    this.countdownTimer = this.countdownTimer.bind(this);\n  }\n  componentDidMount() {\n    const interval = setInterval(() => {\n      this.countdownTimer(this.state.airDate);\n    }, 1000);\n    this.setState({\n      currentInterval: interval\n    });\n  }\n  countdownTimer(date) {\n    this.setState({\n      currentDistance: calculateDistance(date)\n    });\n  }\n\n  render() {\n    return <span>{this.state.currentDistance}</span>;\n  }\n}\n\nexport default ShowCardTimer;\n","import React from \"react\";\nimport \"./ShowCardTopBanner.css\";\nimport ShowCardTimer from \"../ShowCardTimer\";\n\nconst ShowCardTopBanner = props => {\n  return (\n    <div className=\"ShowCardTopBanner\">\n      <ShowCardTimer\n        air_day={props.air_day}\n        air_hour={props.air_hour}\n        air_minute={props.air_minute}\n      />\n    </div>\n  );\n};\n\nexport default ShowCardTopBanner;\n","import React from \"react\";\nimport \"./ShowCardBottomBanner.css\";\n\nconst ShowCardBottomBanner = props => {\n  return (\n    <div className=\"ShowCardBottomBanner\">\n      <span>{props.title}</span>\n    </div>\n  );\n};\n\nexport default ShowCardBottomBanner;\n","import React, { Component } from \"react\";\nimport \"./ShowCard.css\";\nimport ShowCardTopBanner from \"../ShowCardTopBanner\";\nimport ShowCardBottomBanner from \"../ShowCardBottomBanner\";\n\nclass ShowCard extends Component {\n  render() {\n    const show = this.props.show;\n    const styles = {\n      backgroundImage: `url(${show.img_src})`,\n      backgroundPosition: \"center\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\"\n    };\n\n    return (\n      <article className=\"ShowCard\" style={styles}>\n        <ShowCardTopBanner\n          air_day={show.air_day}\n          air_hour={show.air_hour}\n          air_minute={show.air_minute}\n        />\n        <ShowCardBottomBanner title={show.title} />\n      </article>\n    );\n  }\n}\nexport default ShowCard;\n","import React, { Component } from \"react\";\nimport ShowCard from \"../ShowCard\";\nimport { getDateWithDayOfTheWeek } from \"../ShowCardTimer\";\nimport { differenceInSeconds } from \"date-fns\";\n\nimport \"./ShowFeed.css\";\n\n/**\n * Sorts the shows using differenceinSeconds as the base\n *\n * @param {Array} shows //Array of show objects\n */\nfunction sortShowsByClosestToToday(shows) {\n  const now = new Date();\n  shows.sort((a, b) => {\n    return (\n      differenceInSeconds(\n        getDateWithDayOfTheWeek(a.air_day, a.air_hour, a.air_minute),\n        now\n      ) -\n      differenceInSeconds(\n        getDateWithDayOfTheWeek(b.air_day, b.air_hour, b.air_minute),\n        now\n      )\n    );\n  });\n  return shows;\n}\nclass ShowFeed extends Component {\n  render() {\n    return (\n      <div className=\"ShowFeed\">\n        {sortShowsByClosestToToday(this.props.shows).map(s => {\n          return <ShowCard show={s} key={s.id} />;\n        })}\n      </div>\n    );\n  }\n}\nexport default ShowFeed;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\n\nfunction getCurrentTime() {\n  const currentDate = new Date();\n  return currentDate.toLocaleTimeString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n  });\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTime: getCurrentTime()\n    };\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        currentTime: getCurrentTime()\n      });\n    });\n  }\n  render() {\n    return (\n      <header className=\"RinHeader\">\n        <div className=\"rinTitles\">\n          <span id=\"rinMainTitle\">rin</span>\n          <span id=\"rinDescription\">Weekly Anime Airing Tracker</span>\n        </div>\n        <div className=\"rinTime\">\n          <span id=\"rinCurrentTime\" title=\"Current Time\">\n            {this.state.currentTime}\n          </span>\n        </div>\n      </header>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from \"react\";\nimport ShowFeed from \"./components/ShowFeed\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\nconst shows = [\n  {\n    id: 1,\n    title: \"That Time I Got Reincarnated as a Slime\",\n    air_day: 1,\n    air_hour: 23,\n    air_minute: 0,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/548785635784130570/slime.jpg\"\n  },\n  {\n    id: 2,\n    title: \"The Rising of the Shield Hero\",\n    air_day: 2,\n    air_hour: 21,\n    air_minute: 0,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/548785611314561036/shield.jpg\"\n  },\n  {\n    id: 3,\n    title: \"Kemurikusa\",\n    air_day: 3,\n    air_hour: 21,\n    air_minute: 30,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/548857972885815306/kemuri.jpg\"\n  },\n  {\n    id: 4,\n    title: \"Sword Art Online: Alicization\",\n    air_day: 5,\n    air_hour: 23,\n    air_minute: 0,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/549055033824772136/saoalice.jpg\"\n  },\n  {\n    id: 5,\n    title: \"KakeguruiXX\",\n    air_day: 2,\n    air_hour: 1,\n    air_minute: 30,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/549058934179233805/kakeguruixx.jpg\"\n  },\n  {\n    id: 6,\n    title: \"Gotoubun no Hanayome\",\n    air_day: 5,\n    air_hour: 22,\n    air_minute: 30,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/549061764126474261/gotoubun.jpg\"\n  },\n  {\n    id: 7,\n    title: \"Kaguya-sama: Love is War\",\n    air_day: 6,\n    air_hour: 22,\n    air_minute: 30,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/549061068190777344/kaguya.jpg\"\n  },\n  {\n    id: 8,\n    title: \"Dororo\",\n    air_day: 1,\n    air_hour: 21,\n    air_minute: 30,\n    img_src:\n      \"https://cdn.discordapp.com/attachments/511245116871278594/549062287361703958/dororo.jpg\"\n  }\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"Rin\">\n        <Header />\n        <div className=\"content--center\">\n          <main className=\"RinContent\">\n            <ShowFeed shows={shows} />\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}